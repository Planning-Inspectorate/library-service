<?php

/**
 * @file
 * File Path Checker module used for extending site functionalities.
 *
*/

function file_path_checker_page() {
  // Get the content type and field name
  $content_type = 'your_content_type';
  $field_name = 'your_file_field';

  // Load the node entity
  $node = \Drupal::entityTypeManager()->getStorage('node')->load(1); // Replace 1 with the node ID

  // Check if the field exists on the node
  if (isset($node->{$field_name})) {
    $file_uri = $node->{$field_name}[0]['uri']; // Assuming the field is a file field

    // Check if the file path exists
    if (file_exists($file_uri)) {
      $message = 'File path exists: ' . $file_uri;
    } else {
      $message = 'File path does not exist: ' . $file_uri;
    }
  } else {
    $message = 'Field does not exist on the node.';
  }

  return [
    '#type' => 'markup',
    '#markup' => $message,
  ];
}


/**
 * Implements hook_theme().
 */
function file_path_checker_theme($existing, $type, $theme, $path) {
  return [
    'file-path-checker-indexing-log' => [
      'variables' => [
        'results' => NULL,
        'count' => NULL,
        'status_options' => NULL,
        'selected_status' => NULL,
      ],
      'template' => 'file-path-checker-indexing-log',
    ],
  ];
}






/**
 * @file
 * The method to create database for saving failed file while indexing
 * */

 function file_path_checker_update_8006(&$sandbox) {
  $database = \Drupal::database();
  $schema = $database->schema();
  if (!$schema->tableExists('fpc_node_reference')) {
    $table_schema = [
      'description' => 'Stores references between files and nodes.',
      'fields' => [
        'id' => [
          'type' => 'serial', // This makes the 'id' field auto-incrementing
          'unsigned' => TRUE,
          'not null' => TRUE,
        ],
        'fid' => [
          'type' => 'int',
          'not null' => TRUE,
        ],
        'file_uri' => [
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
        ],
        'nid' => [
          'type' => 'int',
          'not null' => FALSE, // Allow NULL values
        ],
        'node_title' => [
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
        ],
        'file_exists' => [ // New column
          'type' => 'int',
          'size' => 'tiny',
          'not null' => TRUE,
          'default' => 0, // Default to 0 (false)
          'description' => 'Indicates whether the file exists (1 = true, 0 = false)',
        ],
        'created' => [
          'type' => 'int',
          'not null' => TRUE,
          'description' => 'Timestamp of the entry',
        ],
      ],
      'primary key' => ['id']    
    ];

    $schema->createTable('fpc_node_reference', $table_schema);
  }
}
