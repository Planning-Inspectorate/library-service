<?php

/**
 * @file
 * PINS module used for extending site functionalities.
 *
*/

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\node\NodeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;


/**
  * Implements hook_form_alter().  
*/
 
function pins_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_issued_hard_copy_edit_form':
    case 'node_hard_copy_loan_edit_form':
      $form['#attached']['library'][] = 'pins/pins_js';
      break;
       
    case 'node_hard_copy_loan_form':  
      $form['#attached']['library'][] = 'pins/pins_js';
      $form['title']['widget'][0]['#required'] = false;
      $form['title']['widget']['#required'] = false;
    break;

    case 'node_hard_copy_form':  
      $form['field_content_reference']['#access'] = false;
    break;
 
    case 'views_form_manage_contents_manage_contents':  
    case 'views_exposed_form': 
      $form['#attached']['library'][] = 'pins/pins_js';
    break;
  }
}


/**
  *  
  *function hook_ENTITY_TYPE_insert
  *
*/

function pins_entity_insert(\Drupal\Core\Entity\EntityInterface $entity) {  
  switch ( $entity->getEntityTypeId()) {
    case 'node':
    // case 'paragraph':
      switch ($entity->bundle()) {
        case 'article':
        case 'hard_copy':
        case 'pdf':
          //Use nid as a unique value
          $reference_id = $entity->id();
          pins_entity_insert_unique_reference_id($entity, $reference_id);    
          break;
      }
      break;
  }
}

/** 
  *  
  *function hook_ENTITY_presave
  *
*/
function pins_entity_presave(\Drupal\Core\Entity\EntityInterface $entity) { 
  switch ( $entity->getEntityTypeId()) {
    case 'node':
    case 'paragraph':
      switch ($entity->bundle()) {
        case 'article':
        case 'hard_copy':
        case 'pdf':
          //Use nid as a unique reference id
          if(!$entity->isNew()){
            $reference_id = $entity->id();
            pins_entity_set_unique_reference_id_on_presave($entity, $reference_id);
          }
          break;
        case 'individual_hardcopy':
          // Use nid and paragraph Id as a unique content reference ID
          if(!$entity->isNew()){
            $parent_id = $entity->getParentEntity()->id();
            $paragraph_id = $entity->id();
            $reference_id = $parent_id.'-'. $paragraph_id;
            pins_entity_set_unique_reference_id_on_presave($entity, $reference_id);
          }
          break;
      }
      break;
  }
}

/**
  *  
  *function pins_entity_insert_unique_reference_id
  * Used for setting Entity_id as a reference id
  *
*/

function pins_entity_insert_unique_reference_id($entity, $content_reference_id){
  if($entity->hasField('field_content_reference')){
    $reference_id = $entity->get('field_content_reference')->value;
    $entity_id = $entity->id();

    if(empty($reference_id) && $entity_id && $content_reference_id){
      $db_table =    $entity->getEntityTypeId().'__field_content_reference';                           
      $result = \Drupal::database()->insert($db_table)
      ->fields(['bundle', 'deleted', 'entity_id', 'revision_id', 'langcode', 'delta', 'field_content_reference_value'])
      ->values([
        'bundle' => $entity->bundle(),
        'deleted' => 0,
        'entity_id' => $entity_id,
        'revision_id' => $entity_id,
        'langcode' => $entity->get('langcode')->value,
        'delta' => 0,
        'field_content_reference_value' => $content_reference_id ,
      ])
      ->execute();
      drupal_flush_all_caches();
    }
  }
}

/**
  *  
  *function pins_entity_set_unique_reference_id_on_presave
  * Used for setting Entity_id as a content reference id
  *
*/
function pins_entity_set_unique_reference_id_on_presave(&$entity, $content_reference_id){
  if($entity->hasField('field_content_reference')){
    $reference_id = $entity->get('field_content_reference')->value;
    $entity_id = $entity->id();

    if(empty($reference_id) && $entity_id && $content_reference_id){
      $entity->set('field_content_reference', $content_reference_id);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for page_title template.
 */
function pins_preprocess_page_title(&$variables) {
  $route_match = \Drupal::routeMatch();
  if ($route_match->getRouteName() === 'node.add') {
    $variables['title'] = str_replace('Create', 'Add ', $variables['title']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for page_html template.
 */
function pins_preprocess_html(&$variables) {
  $route_match = \Drupal::routeMatch();
  if ($route_match->getRouteName() === 'node.add') {
    $variables['head_title']['title'] = str_replace('Create', 'Add ', $variables['head_title']['title']);
  }
}
