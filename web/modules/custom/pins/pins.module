<?php

/**
 * @file
 * PINS module used for extending site functionalities.
 *
*/

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\node\NodeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;

use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\ViewExecutable;
use Drupal\Core\Messenger\MessengerInterface;
use Drupal\user\Entity\User;
use Drupal\Core\Render\Markup;
use Drupal\file\Entity\File;

/**
 * Increase the length of "field_alternative_title" to 255 characters.
 */
function pins_update_8002() {
  pins_change_alternative_size();
}

function pins_change_alternative_size(){
  $database = \Drupal::database();
  $database->query("ALTER TABLE node__field_alternative_title MODIFY field_alternative_title_value VARCHAR(255)");
  $database->query("ALTER TABLE node_revision__field_alternative_title MODIFY field_alternative_title_value VARCHAR(255)");

  $storage_key = 'node.field_schema_data.field_alternative_title';
  $storage_schema = \Drupal::keyValue('entity.storage_schema.sql');
  $field_schema = $storage_schema->get($storage_key);
  $field_schema['node__field_alternative_title']['fields']['field_alternative_title_value']['length'] = 255;
  $field_schema['node_revision__field_alternative_title']['fields']['field_alternative_title_value']['length'] = 255;
  $storage_schema->set($storage_key, $field_schema);

  // Update field configuration.
  $config = \Drupal::configFactory()
  ->getEditable('field.storage.node.field_alternative_title');
  $config->set('settings.max_length', 255);
  $config->save(TRUE);

}

function pins_load_all_folders(){
  $vid = 'kl_folders';
  $terms =\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid);
  foreach ($terms as $term) {
    $term_data[$term->name] = array(
      'id' => $term->tid,
      'name' => $term->name
    );
  }
}

/**
  * Implements hook_form_alter().  
*/
 
function pins_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_issued_hard_copy_edit_form':
    case 'node_hard_copy_loan_edit_form':
      $form['#attached']['library'][] = 'pins/pins_js';
      break;
       
    case 'node_hard_copy_loan_form':  
      $form['#attached']['library'][] = 'pins/pins_js';
      $form['title']['widget'][0]['#required'] = false;
      $form['title']['widget']['#required'] = false;
    break;

    case 'node_hard_copy_form':  
      $form['field_content_reference']['#access'] = false;
      $form['#validate'][] = 'unique_title_node_form_validate';
    break;
 
    case 'views_form_manage_contents_manage_contents':  
    case 'views_exposed_form': 
      $form['#attached']['library'][] = 'pins/pins_js';
    break;

    case 'node_kl_document_form':
      case 'node_kl_document_edit_form':
      case 'node_kl_compound_document_form':
      case 'node_kl_compound_document_edit_form':
      case 'node_hard_copy_edit_form':
        setDateTimeElement($form, 'field_kl_archived_date');
        setDateTimeElement($form, 'field_other_date');
        setDateTimeElement($form, 'field_date');
        //$form['#validate'][] = 'unique_title_node_form_validate';

  }
}

/**
 * Custom method to hide the time element from form controls.
 */
function setDateTimeElement(&$form, $field_name) {
  if (isset($form[$field_name]['widget'][0]['value'])) {
    $form[$field_name]['widget'][0]['value']['#date_time_element'] = 'none';
    $form[$field_name]['widget'][0]['value']['#date_time_format'] = '';
  }
}


/**
 * Custom validation handler to ensure unique node titles.
 */
function unique_title_node_form_validate($form, FormStateInterface $form_state) {
  $node_title = $form_state->getValue('title')[0]['value'];
  $node_type = $form_state->getFormObject()->getEntity()->bundle();
  $current_node_id = $form_state->getFormObject()->getEntity()->id();
  $current_vernum = $form_state->getValue('field_vernum')[0]['value'];
  $current_doc_id = $form_state->getValue('field_kl_doc_id')[0]['value'];

  // Query to check for existing nodes with the same title and version.
  $query = \Drupal::entityQuery('node')
    ->condition('title', $node_title)
    ->condition('type', $node_type);

  $or = $query->orConditionGroup();
  $or->condition('field_vernum', $current_vernum, '='); // Explicitly specify the operator
  $or->condition('field_vernum', NULL, 'IS NULL');
  if ($current_doc_id) {
      $or->condition('field_kl_doc_id', $current_doc_id, '<>'); 
  }
  $query->condition($or);

  // Exclude the current node from the check if it's an edit operation.
  if ($current_node_id) {
    $query->condition('nid', $current_node_id, '<>');
  }
  $nids = $query->execute();
  if (!empty($nids)) {
    $form_state->setErrorByName('title', t('The title "%title" is already in use. Please choose a different title.', ['%title' => $node_title]));
  }
}

/**
  *  
  *function hook_ENTITY_TYPE_insert
  *
*/

function pins_entity_insert(\Drupal\Core\Entity\EntityInterface $entity) {  
  switch ( $entity->getEntityTypeId()) {
    case 'node':
    // case 'paragraph':
      switch ($entity->bundle()) {
        case 'article':
        case 'hard_copy':
        case 'pdf':
        case 'kl_compound_document':
        case 'kl_document':
          //Use nid as a unique value
          $reference_id = $entity->id();
          pins_entity_insert_unique_reference_id($entity, $reference_id);    
          break;
      }
      break;
  }
}

/** 
  *  
  *function hook_ENTITY_presave
  *
*/
function pins_entity_presave(\Drupal\Core\Entity\EntityInterface $entity) { 
  switch ( $entity->getEntityTypeId()) {
    case 'node':
    case 'paragraph':
      switch ($entity->bundle()) {
        case 'article':
        case 'hard_copy':
        case 'pdf':
        case 'kl_document':
          pins_set_inheritance($entity);
          //Use nid as a unique reference id
          if(!$entity->isNew()){
            $reference_id = $entity->id();
            pins_entity_set_unique_reference_id_on_presave($entity, $reference_id);
          }
          pins_entity_set_file_size_on_presave($entity);
          pins_entity_check_archived_on_presave($entity);
          
          break;
        case 'individual_hardcopy':
          // Use nid and paragraph Id as a unique content reference ID
          if(!$entity->isNew()){
            $parent_id = $entity->getParentEntity()->id();
            $paragraph_id = $entity->id();
            $reference_id = $parent_id.'-'. $paragraph_id;
            pins_entity_set_unique_reference_id_on_presave($entity, $reference_id);
          }
          break;
        case 'kl_compound_document':          
          pins_set_inheritance($entity);
          //migrate compound docs once
          if($compounded_target_ids = pins_get_compound_referenced_document_id($entity)){
            $fieldname = 'field_documents';
            if(!$entity->get($fieldname)->target_id){
              $existing_target_ids =  pins_get_target_ids($entity, $fieldname);
              $merged_ids = array_merge($existing_target_ids, $compounded_target_ids);
              $target_ids = array_unique($merged_ids);
              $entity->get($fieldname)->setValue($target_ids);
            }
          }
         
          //process compound documents
          pins_compound_document($entity);
          
          //Use nid as a unique reference id
          if(!$entity->isNew()){
            $reference_id = $entity->id();
            pins_entity_set_unique_reference_id_on_presave($entity, $reference_id);
          }
          break;
        
        case 'kl_shortcut': 
        case 'kl_url':
        case 'kl_virtual_folder': 
        case 'kl_classification_shortcut':        
            pins_set_inheritance($entity);   
          break;

      }
      break;
  }
}

/**
  *  
  *function pins_compound_document
  * For creating and updating compound document based on referenced
  *
*/

function pins_compound_document(&$entity, $field_name='field_documents'){
  if($entity->hasField($field_name)){
    $referenced_entities = $entity->get($field_name)->referencedEntities();
    $authors = $classification = $doc_folder = $series = [];
    $fieldnames = [
      "field_kl_authors",
      "field_kl_classification",
      "field_kl_doc_folder",
      "field_kl_series",
    ];
    $results = [];

    foreach ($referenced_entities as $key => $referenced_entity) {
      foreach ($fieldnames as $key => $fieldname) {
        //host target ids
        $host_target_ids = (array)pins_get_target_ids($entity, $fieldname);
        //compound target ids
        $compounded_target_ids = (array)pins_get_target_ids($referenced_entity, $fieldname);

        if(isset($results[$fieldname])){
          $merged_ids = array_merge((array)$results[$fieldname], $host_target_ids, $compounded_target_ids);
        }
        else{
          $merged_ids = array_merge($host_target_ids, $compounded_target_ids);
        }

        $target_ids = array_unique($merged_ids);
        $results[$fieldname] = $target_ids;
      }   
    }

    foreach ($results as $fieldname => $target_ids) {
      $entity->get($fieldname)->setValue($target_ids);
    }
  }
}

/**
  *  
  *function pins_get_target_ids
  * get field values
  *
*/
function pins_get_target_ids($entity, $fieldname){
  $target_ids = [];
  if($fieldname && $entity->hasField($fieldname)){
    if($entity->get($fieldname)->target_id){
      $target_id_strs = $entity->get($fieldname)->getString();
      $target_ids = explode(',',str_replace(" ", "",$target_id_strs));
    }
  }
  return $target_ids;
}


/**
  *  
  *function pins_compound_document
  * For creating and updating compound document based on referenced
  *
*/

function pins_set_inheritance(&$entity, $field_name='field_kl_doc_folder'){
  if($entity->hasField($field_name)){
    $referenced_entities = $entity->get($field_name)->referencedEntities();
    $authors = $classification = $doc_folder = $series = [];
    $fieldnames = [
      'field_kl_authors' => "field_kl_authors",
      'field_kl_classification' => "field_kl_classification",
      'field_kl_reading_lists' => 'field_kl_reading_lists',
      'field_kl_series' => "field_kl_series",
    ];

    $results = [];

    foreach ($referenced_entities as $key => $referenced_entity) {
      foreach ($fieldnames as $referenced_fieldname => $host_fieldname) {
        //host target ids
        $host_target_ids = (array)pins_get_target_ids($entity, $host_fieldname);
        //compound target ids
        $referenced_target_ids = (array)pins_get_target_ids($referenced_entity, $referenced_fieldname);

        if(isset($results[$host_fieldname])){
          $merged_ids = array_merge((array)$results[$host_fieldname], $host_target_ids, $referenced_target_ids);
        }
        else{
          $merged_ids = array_merge($host_target_ids, $referenced_target_ids);
        }

        $target_ids = array_unique($merged_ids);
        $results[$host_fieldname] = $target_ids;
      }   
    }

    foreach ($results as $host_fieldname => $target_ids) {
      $entity->get($host_fieldname)->setValue($target_ids);
    }
  }
}

/**
  *  
  *function pins_get_compounded_document
  * Get document ID referencing compound document
  *
*/

function pins_get_compound_referenced_document_id($entity){
  // $target_ids = [];
  // $query = \Drupal::database()->select('node__field_kl_doc_compound_folder', 'd');

  // $query->fields('d', ['entity_id']);
  // $query->condition('d.field_kl_doc_compound_folder_target_id', $entity->id());
  // $query->distinct();
  // $results = $query->execute()->fetchAll();

  // foreach ($results as $key => $result) {
  //   $target_ids[] = $result->entity_id;
  // }
  // return  $target_ids;
  $target_ids = [];
  $query = \Drupal::database()->select('node__field_kl_doc_compound_folder', 'd');
  $query->join('node__field_kl_doc_id', 't', 'd.entity_id = t.entity_id');
  $query->join('node__field_vernum', 'f', 'f.entity_id = d.entity_id');

  $query->fields('d', ['entity_id']);
  $query->fields('t', ['field_kl_doc_id_value']);
  $query->fields('f', ['field_vernum_value']);
  $query->condition('d.field_kl_doc_compound_folder_target_id', $entity->id());
  $query->orderBy('f.field_vernum_value', 'ASC');
  $results = $query->execute()->fetchAll();

  foreach ($results as $key => $result) {
    $target_ids[$result->field_kl_doc_id_value] = $result->entity_id;
  }
  return  $target_ids;
}

/**
  *  
  *function pins_entity_insert_unique_reference_id
  * Used for setting Entity_id as a reference id
  *
*/

function pins_entity_insert_unique_reference_id($entity, $content_reference_id){
  if($entity->hasField('field_content_reference')){
    $reference_id = $entity->get('field_content_reference')->value;
    $entity_id = $entity->id();

    if(empty($reference_id) && $entity_id && $content_reference_id){
      $db_table =    $entity->getEntityTypeId().'__field_content_reference';                           
      $result = \Drupal::database()->insert($db_table)
      ->fields(['bundle', 'deleted', 'entity_id', 'revision_id', 'langcode', 'delta', 'field_content_reference_value'])
      ->values([
        'bundle' => $entity->bundle(),
        'deleted' => 0,
        'entity_id' => $entity_id,
        'revision_id' => $entity_id,
        'langcode' => $entity->get('langcode')->value,
        'delta' => 0,
        'field_content_reference_value' => $content_reference_id ,
      ])
      ->execute();
      drupal_flush_all_caches();
    }
  }
}

/**
  *  
  *function pins_entity_set_unique_reference_id_on_presave
  * Used for setting Entity_id as a content reference id
  *
*/
function pins_entity_set_unique_reference_id_on_presave(&$entity, $content_reference_id){
  if($entity->hasField('field_content_reference')){
    $reference_id = $entity->get('field_content_reference')->value;
    $entity_id = $entity->id();

    if(empty($reference_id) && $entity_id && $content_reference_id){
      $entity->set('field_content_reference', $content_reference_id);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for page_title template.
 */
function pins_preprocess_page_title(&$variables) {
  $route_match = \Drupal::routeMatch();
  if ($route_match->getRouteName() === 'node.add') {
    $variables['title'] = str_replace('Create', 'Add ', $variables['title']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for page_html template.
 */
function pins_preprocess_html(&$variables) {
  $route_match = \Drupal::routeMatch();
  if ($route_match->getRouteName() === 'node.add') {
    $variables['head_title']['title'] = str_replace('Create', 'Add ', $variables['head_title']['title']);
  }
}

/**
 * Implements hook_views_pre_view().
 */
function pins_views_pre_view(ViewExecutable $view, $display_id, $args) {

  if ($view->id() == 'taxonomy_search' && $display_id === 'page_2') {
    $term_id = array_key_exists(0, $args) ? $args[0] : '';
    $vocabularies = ["kl_publications", "kl_topics"];
    if ($term_id != '') {
      $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($term_id);
      if ($term && in_array($term->bundle(), $vocabularies)) {
        $empty_config = $view->display_handler->getOption('result');
        $empty_config['content']['value'] = '';
        $view->display_handler->setOption('empty', $empty_config);
      }
    }
   
  }
}

/**
* Implements hook_views_query_alter().
*/

function pins_views_query_alter(ViewExecutable $view, QueryPluginBase $query){
  $user = \Drupal::currentUser();
  // Added for KL Publication 
  // ToDo need to remove once folder logic is implemented.
  if ($view->id() === 'content_list_page') {
    $term_id = $view->args[0];
    if ($term_id > 0) {
      $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($term_id);
      if ($term && $custom_field_value = $term->get('field_reading_list')->getValue()) {
        $id_list = [];
        if (is_array($custom_field_value)) {
          foreach ($custom_field_value as $item) {
            $id_list[] = $item['target_id']; 
          }
        }

        if (count($id_list) > 0) {
            foreach ($query->where as &$condition_group) {
              foreach ($condition_group['conditions'] as &$condition) {
                  if ($condition['field'] == 'taxonomy_index.tid = :taxonomy_index_tid1') {
                      $condition = [
                          'field' => 'taxonomy_index.tid',
                          'value' => $id_list,
                          'operator' => 'IN',
                      ];
                    break; 
                  }
               }
            }
        }
        
        $vocabulary_id = $term->bundle();
        if ($vocabulary_id == 'kl_topics') {
          if ($field_classifications = $term->get('field_kl_classification')->getValue()) {
            $id_classifications = [];
            if (is_array($field_classifications)) {
              foreach ($field_classifications as $item) {
                $id_classifications[] = $item['target_id']; 
              }
            }
          }
          if (is_array($id_classifications) && count($id_classifications) > 0) {
            $definition = [
              'table' => 'node__field_kl_classification',
              'field' => 'entity_id',
              'left_table' => 'node_field_data',
              'left_field' => 'nid',
              'type' => 'LEFT',
            ];
            $join = \Drupal::service('plugin.manager.views.join')->createInstance('standard', $definition);
            $query->addRelationship('node__field_kl_classification', $join, 'node_field_data');
            $query->addWhere('AND', 'node__field_kl_classification.field_kl_classification_target_id', $id_classifications, 'IN');
          }
        }
      }
    }
  }


  if (($view->storage->get('id') == 'horizon') ) {
    if (($view->getDisplay()->display['id'] == 'versions') ) {
      
      $node = \Drupal::routeMatch()->getParameter('node');
      if ($node instanceof \Drupal\node\NodeInterface) {
        //Get the current node object.
        $nid = $node->id();
        //get document version id
        if($node->hasField('field_kl_doc_id')){
          $doc_id = $node->get('field_kl_doc_id')->value;
        }
      }

      if (!empty($doc_id)) {
        foreach ($query->where as &$condition_group) {
          foreach ($condition_group['conditions'] as &$condition) {
            if ($condition['field'] == 'node__field_kl_doc_id.field_kl_doc_id_value') {
              $condition = [
              'field' => 'node__field_kl_doc_id.field_kl_doc_id_value',
              'value' => $doc_id,
              'operator' => 'LIKE'
              ];
            }       
          }
        }
      }
    }
  }
}

function pins_get_cached_version_doc_ids($nid, $cid = 'pins_get_revision_nid_by_doc_id'){
  $data = null;
  $user = \Drupal::currentUser();
  $uid = $user->id();
  $cid = $cid;

  if($cache = \Drupal::cache()->get($cid)) {
      $data = $cache->data;
  }
  else {      
    $data = pins_get_version_doc_id($nid);
     \Drupal::cache()
       ->set($cid, $data);
  }
  
  return  $data;
}

function pins_get_version_doc_id($nid){
  $query = \Drupal::database()->select('nood__field_kl_doc_id', 'd');

  $query->fields('d', ['field_kl_doc_id_value']);
  $query->condition('d.entity_id', $nid);
  $query->distinct();
  return $result = $query->execute()->fetchAll();
}

function pins_get_cached_doc_version_id($doc_id, $cid = 'pins_get_revision_nid_by_doc_id'){
  $data = null;
  $user = \Drupal::currentUser();
  $uid = $user->id();
  $cid = $cid;

  if($cache = \Drupal::cache()->get($cid)) {
      $data = $cache->data;
  }
  else {      
    $data = pins_get_doc_version_id($doc_id);
     \Drupal::cache()
       ->set($cid, $data);
  }
  return  $data;
}

function pins_get_doc_version_id($doc_id, $nid=0){
  $nodeStorage = \Drupal::entityTypeManager()->getStorage('node');
  $nodeQuery = $nodeStorage->getQuery();
  $nids = $nodeQuery->accessCheck(false)
    ->condition('type', 'kl_document')
    ->condition('field_kl_doc_id', $doc_id);
    
    if(!empty($nid)){
      $nodeQuery->condition('entity_id', $nid, '<>');
    }

    $nodeQuery->execute();
  return $nids;
}

/**
* Implements hook_preprocess_views_view_table().
*/

function pins_preprocess_views_view_table(&$variables) {
  $display_id = $variables['view']->getdisplay()->display['id'];
  $link_markup = Markup::create('<a href="/physical-copies-list">Hard Copies</a>');
  if ($variables['view']->id() === 'browse_library' && $display_id === 'page_2') {
    if (count($variables['rows']) > 0 ) {
      $custom_row = $variables['rows'][0];
      $custom_row['columns']['name']['content'][0]['field_output']['#markup'] = $link_markup;
      $variables['rows'][] = $custom_row;
    }
  }
}

/**
  *  
  *function pins_entity_set_file_size_on_presave
  * Used for setting file size for uploaded file.
  *
*/

function pins_entity_set_file_size_on_presave(&$entity){

  if($entity->hasField('field_kl_doc_file')){
    $fileField = $entity->get('field_kl_doc_file')->entity;
    if ($fileField) {
      $fileSize = $fileField->getSize();
      if ($fileSize > 0)
          $entity->set('field_kl_doc_file_size', $fileSize);
    }
  }
}


/**
  *  
  * function pins_entity_check_archived_on_presave
  * Used for reset/setting archived date, note based on archived flag value.
  *
*/

function pins_entity_check_archived_on_presave(&$entity){
  if ($entity->hasField('field_kl_archived') && isset($entity->field_kl_archived->value)) {
    $archived_value = $entity->field_kl_archived->value;
    // If the entity is not archived, reset the dates and notes
    if (!$archived_value) {
      // Reset the archive date
      $entity->set('field_kl_archived_date', NULL);
      // Reset the archive note
      $entity->set('field_archived_note', NULL);
    } else {
      // If the entity is being archived, ensure the date is set
      if ($entity->hasField('field_kl_archived_date') && !isset($entity->field_kl_archived_date->value)) {
        $entity->set('field_kl_archived_date', date('Y-m-d\TH:i:s'));
      }
    }
  }
}