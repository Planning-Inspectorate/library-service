<?php

/**
 * @file
 * PINS module used for extending site functionalities.
 *
*/

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\node\NodeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;

use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\ViewExecutable;
use Drupal\Core\Messenger\MessengerInterface;
use Drupal\user\Entity\User;


/**
  * Implements hook_form_alter().  
*/
 
function pins_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_issued_hard_copy_edit_form':
    case 'node_hard_copy_loan_edit_form':
      $form['#attached']['library'][] = 'pins/pins_js';
      break;
       
    case 'node_hard_copy_loan_form':  
      $form['#attached']['library'][] = 'pins/pins_js';
      $form['title']['widget'][0]['#required'] = false;
      $form['title']['widget']['#required'] = false;
    break;

    case 'node_hard_copy_form':  
      $form['field_content_reference']['#access'] = false;
    break;
 
    case 'views_form_manage_contents_manage_contents':  
    case 'views_exposed_form': 
      $form['#attached']['library'][] = 'pins/pins_js';
    break;
  }
}


/**
  *  
  *function hook_ENTITY_TYPE_insert
  *
*/

function pins_entity_insert(\Drupal\Core\Entity\EntityInterface $entity) {  
  switch ( $entity->getEntityTypeId()) {
    case 'node':
    // case 'paragraph':
      switch ($entity->bundle()) {
        case 'article':
        case 'hard_copy':
        case 'pdf':
        case 'kl_compound_document':
        case 'kl_document':
          //Use nid as a unique value
          $reference_id = $entity->id();
          pins_entity_insert_unique_reference_id($entity, $reference_id);    
          break;
      }
      break;
  }
}

/** 
  *  
  *function hook_ENTITY_presave
  *
*/
function pins_entity_presave(\Drupal\Core\Entity\EntityInterface $entity) { 
  switch ( $entity->getEntityTypeId()) {
    case 'node':
    case 'paragraph':
      switch ($entity->bundle()) {
        case 'article':
        case 'hard_copy':
        case 'pdf':
        case 'kl_document':
          //Use nid as a unique reference id
          if(!$entity->isNew()){
            $reference_id = $entity->id();
            pins_entity_set_unique_reference_id_on_presave($entity, $reference_id);
          }
          break;
        case 'individual_hardcopy':
          // Use nid and paragraph Id as a unique content reference ID
          if(!$entity->isNew()){
            $parent_id = $entity->getParentEntity()->id();
            $paragraph_id = $entity->id();
            $reference_id = $parent_id.'-'. $paragraph_id;
            pins_entity_set_unique_reference_id_on_presave($entity, $reference_id);
          }
          break;
        case 'kl_compound_document':
          pins_compound_document($entity);
          
          //Use nid as a unique reference id
          if(!$entity->isNew()){
            $reference_id = $entity->id();
            pins_entity_set_unique_reference_id_on_presave($entity, $reference_id);
          }
          break;

      }
      break;
  }
}

/**
  *  
  *function pins_compound_document
  * For creating and updating compound document based on referenced
  *
*/

function pins_compound_document(&$entity, $field_name='field_documents'){
  if($entity->hasField($field_name)){
    $document_entities = $entity->get($field_name)->referencedEntities();
    $authors = $classification = $doc_folder = $series = [];
    $fieldnames = [
      "field_kl_authors",
      "field_kl_classification",
      "field_kl_doc_folder",
      "field_kl_series",
    ];
    $results = [];

    foreach ($document_entities as $key => $document_entity) {
      foreach ($fieldnames as $key => $fieldname) {
        //host target ids
        $host_target_ids = (array)pins_get_target_ids($entity, $fieldname);
        //compound target ids
        $compounded_target_ids = (array)pins_get_target_ids($document_entity, $fieldname);

        if(isset($results[$fieldname])){
          $merged_ids = array_merge((array)$results[$fieldname], $host_target_ids, $compounded_target_ids);
        }
        else{
          $merged_ids = array_merge($host_target_ids, $compounded_target_ids);
        }

        $target_ids = array_unique($merged_ids);
        $results[$fieldname] = $target_ids;
      }   
    }

    foreach ($results as $fieldname => $target_ids) {
      $entity->get($fieldname)->setValue($target_ids);
    }
  }
}

/**
  *  
  *function pins_get_target_ids
  * get field values
  *
*/
function pins_get_target_ids($entity, $fieldname){
  $target_ids = [];
  if($fieldname && $entity->hasField($fieldname)){
    if($entity->get($fieldname)->target_id){
      $target_id_strs = $entity->get($fieldname)->getString();
      $target_ids = explode(',',str_replace(" ", "",$target_id_strs));
    }
  }
  return $target_ids;
}

/**
  *  
  *function pins_entity_insert_unique_reference_id
  * Used for setting Entity_id as a reference id
  *
*/

function pins_entity_insert_unique_reference_id($entity, $content_reference_id){
  if($entity->hasField('field_content_reference')){
    $reference_id = $entity->get('field_content_reference')->value;
    $entity_id = $entity->id();

    if(empty($reference_id) && $entity_id && $content_reference_id){
      $db_table =    $entity->getEntityTypeId().'__field_content_reference';                           
      $result = \Drupal::database()->insert($db_table)
      ->fields(['bundle', 'deleted', 'entity_id', 'revision_id', 'langcode', 'delta', 'field_content_reference_value'])
      ->values([
        'bundle' => $entity->bundle(),
        'deleted' => 0,
        'entity_id' => $entity_id,
        'revision_id' => $entity_id,
        'langcode' => $entity->get('langcode')->value,
        'delta' => 0,
        'field_content_reference_value' => $content_reference_id ,
      ])
      ->execute();
      drupal_flush_all_caches();
    }
  }
}

/**
  *  
  *function pins_entity_set_unique_reference_id_on_presave
  * Used for setting Entity_id as a content reference id
  *
*/
function pins_entity_set_unique_reference_id_on_presave(&$entity, $content_reference_id){
  if($entity->hasField('field_content_reference')){
    $reference_id = $entity->get('field_content_reference')->value;
    $entity_id = $entity->id();

    if(empty($reference_id) && $entity_id && $content_reference_id){
      $entity->set('field_content_reference', $content_reference_id);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for page_title template.
 */
function pins_preprocess_page_title(&$variables) {
  $route_match = \Drupal::routeMatch();
  if ($route_match->getRouteName() === 'node.add') {
    $variables['title'] = str_replace('Create', 'Add ', $variables['title']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for page_html template.
 */
function pins_preprocess_html(&$variables) {
  $route_match = \Drupal::routeMatch();
  if ($route_match->getRouteName() === 'node.add') {
    $variables['head_title']['title'] = str_replace('Create', 'Add ', $variables['head_title']['title']);
  }
}

/**
* Implements hook_views_query_alter().
*/

function pins_views_query_alter(ViewExecutable $view, QueryPluginBase $query){
  $user = \Drupal::currentUser();

  if (($view->storage->get('id') == 'horizon') ) {
    if (($view->getDisplay()->display['id'] == 'versions') ) {
      
      $node = \Drupal::routeMatch()->getParameter('node');
      if ($node instanceof \Drupal\node\NodeInterface) {
        //Get the current node object.
        $nid = $node->id();
        //get document version id
        if($node->hasField('field_kl_doc_id')){
          $doc_id = $node->get('field_kl_doc_id')->value;
        }
      }

      if (!empty($doc_id)) {
        foreach ($query->where as &$condition_group) {
          foreach ($condition_group['conditions'] as &$condition) {
            if ($condition['field'] == 'node__field_kl_doc_id.field_kl_doc_id_value') {
              $condition = [
              'field' => 'node__field_kl_doc_id.field_kl_doc_id_value',
              'value' => $doc_id,
              'operator' => 'LIKE'
              ];
            }       
          }
        }
      }
    }
  }
}

function pins_get_cached_version_doc_ids($nid, $cid = 'pins_get_revision_nid_by_doc_id'){
  $data = null;
  $user = \Drupal::currentUser();
  $uid = $user->id();
  $cid = $cid;

  if($cache = \Drupal::cache()->get($cid)) {
      $data = $cache->data;
  }
  else {      
    $data = pins_get_version_doc_id($nid);
     \Drupal::cache()
       ->set($cid, $data);
  }
  
  return  $data;
}

function pins_get_version_doc_id($nid){
  $query = \Drupal::database()->select('nood__field_kl_doc_id', 'd');

  $query->fields('d', ['field_kl_doc_id_value']);
  $query->condition('d.entity_id', $nid);
  $query->distinct();
  return $result = $query->execute()->fetchAll();
}

function pins_get_cached_doc_version_id($doc_id, $cid = 'pins_get_revision_nid_by_doc_id'){
  $data = null;
  $user = \Drupal::currentUser();
  $uid = $user->id();
  $cid = $cid;

  if($cache = \Drupal::cache()->get($cid)) {
      $data = $cache->data;
  }
  else {      
    $data = pins_get_doc_version_id($doc_id);
     \Drupal::cache()
       ->set($cid, $data);
  }
  return  $data;
}

function pins_get_doc_version_id($doc_id, $nid=0){
  $nodeStorage = \Drupal::entityTypeManager()->getStorage('node');
  $nodeQuery = $nodeStorage->getQuery();
  $nids = $nodeQuery->accessCheck(false)
    ->condition('type', 'kl_document')
    ->condition('field_kl_doc_id', $doc_id);
    
    if(!empty($nid)){
      $nodeQuery->condition('entity_id', $nid, '<>');
    }

    $nodeQuery->execute();
  return $nids;
}